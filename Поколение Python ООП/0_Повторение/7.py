"""
–î–µ–∫–æ—Ä–∞—Ç–æ—Ä @recviz üå∂Ô∏èüå∂Ô∏è
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @recviz, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏
—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–æ–ª–∂–µ–Ω –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –≤—Å–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ —ç—Ç–∏—Ö –≤—ã–∑–æ–≤–∞—Ö,
–ø—Ä–∏—á–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –≤—ã–∑–æ–≤—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º—ã–µ –≤ –≥–ª—É–±–∏–Ω—É, –¥–æ–ª–∂–Ω—ã –æ—Ç–¥–µ–ª—è—Ç—å—Å—è –¥—Ä—É–≥ –æ—Ç –¥—Ä—É–≥–∞ —á–µ—Ç—ã—Ä—å–º—è –ø—Ä–æ–±–µ–ª–∞–º–∏.

–û—á–µ—Ä–µ–¥–Ω–æ–π –≤—ã–∑–æ–≤ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –∑–Ω–∞–∫ ->, –∏–º—è –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏
–∞—Ä–≥—É–º–µ–Ω—Ç—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ. –í–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–æ–ª–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Å–µ–±—è –∑–Ω–∞–∫ <- –∏
–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ —Å–∞–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 1. –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–∏ —ç—Ç–æ–º –≤—ã–∑–æ–≤–µ, –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –æ–¥–Ω–æ–º —É—Ä–æ–≤–Ω–µ
–æ—Ç—Å—Ç—É–ø–æ–≤.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 2. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ, —á—Ç–æ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –ø–æ–≥–ª–æ—â–∞—Ç—å –≤–æ–∑–≤—Ä–∞—â–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ–∫–æ—Ä–∏—Ä—É–µ–º–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ
–¥–æ–ª–∂–µ–Ω —É–º–µ—Ç—å –¥–µ–∫–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã—Ö –∏ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 3. –í —Ç–µ—Å—Ç–∏—Ä—É—é—â—É—é —Å–∏—Å—Ç–µ–º—É —Å–¥–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, —Å–æ–¥–µ—Ä–∂–∞—â—É—é —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä @recviz, –Ω–æ –Ω–µ –∫–æ–¥,
–≤—ã–∑—ã–≤–∞—é—â–∏–π –µ–≥–æ.Ôªø

–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ 4. –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å—Å—ã–ª–∫–∞–º:

–ê—Ä—Ö–∏–≤ —Å —Ç–µ—Å—Ç–∞–º–∏
GitHub
Sample Input 1:

@recviz
def add(a, b):
    return a + b

add(1, b=2)
Sample Output 1:

-> add(1, b=2)
<- 3
Sample Input 2:

@recviz
def add(a, b, c, d, e):
    return (a + b + c) * (d + e)

add('a', b='b', c='c', d=3, e=True)
Sample Output 2:

-> add('a', b='b', c='c', d=3, e=True)
<- 'abcabcabcabc'
Sample Input 3:

@recviz
def fib(n):
    if n <= 2:
        return 1
    else:
        return fib(n - 1) + fib(n - 2)

fib(4)
Sample Output 3:

-> fib(4)
    -> fib(3)
        -> fib(2)
        <- 1
        -> fib(1)
        <- 1
    <- 2
    -> fib(2)
    <- 1
<- 3
Sample Input 4:

@recviz
def fact(n):
    if n == 0:
        return 1
    else:
        return n*fact(n-1)

fact(5)
Sample Output 4:

-> fact(5)
    -> fact(4)
        -> fact(3)
            -> fact(2)
                -> fact(1)
                    -> fact(0)
                    <- 1
                <- 1
            <- 2
        <- 6
    <- 24
<- 120
"""
import functools


def recviz(func):
    count = 0

    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        nonlocal count
        all_args = list(map(repr, args))
        all_kwargs = [f'{k}={v!r}' for k, v in kwargs.items()]
        print(f'{'    ' * count}-> {func.__name__}({', '.join(all_args + all_kwargs)})')
        count += 1
        res = func(*args, **kwargs)
        count -= 1
        print(f'{'    ' * count}<- {repr(res)}')
        return res

    return wrapper


@recviz
def fact(n):
    if n == 0:
        return 1
    else:
        return n * fact(n - 1)


fact(5)


@recviz
def add(a, b, c, d, e):
    return (a + b + c) * (d + e)

add('a', 'b', c='c', d=3, e=True)