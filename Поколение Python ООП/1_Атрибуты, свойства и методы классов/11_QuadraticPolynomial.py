"""
Класс QuadraticPolynomial
Квадратный трехчлен – это многочлен вида
a
x
2
+
b
x
+
c
ax
2
 +bx+c, где
a
≠
0
a

=0. Например:
x
2
+
1
x
2
−
5
x
+
6
x
2
 +1
x
2
 −5x+6
Значение переменной
x
x, при котором квадратный трехчлен обращается в ноль, называют его корнем. Квадратный трехчлен может иметь один корень,
два корня или вовсе не иметь корней. Корни квадратного трехчлена, если они существуют, находятся по формуле:
x
1
,
2
=
−
b
±
b
2
−
4
a
c
2
a
x
1,2
​
 =
2a
−b±
b
2
 −4ac
​

​

Реализуйте класс QuadraticPolynomial, описывающий квадратный трехчлен. При создании экземпляра класс должен принимать
три аргумента в следующем порядке:

a — коэффициент
a
a квадратного трехчлена
b — коэффициент
b
b квадратного трехчлена
c — коэффициент
c
c квадратного трехчлена
Экземпляр класса QuadraticPolynomial должен иметь три атрибута:

a — коэффициент
a
a квадратного трехчлена
b — коэффициент
b
b квадратного трехчлена
c — коэффициент
c
c квадратного трехчлена
Класс QuadraticPolynomial должен иметь четыре свойства:

x1 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена, вычисленный по формуле:
x
1
=
−
b
−
b
2
−
4
a
c
2
a
x
1
​
 =
2a
−b−
b
2
 −4ac
​

​

Если квадратный трехчлен не имеет корней (
b
2
−
4
a
c
<
0
b
2
 −4ac<0), значением свойства должно быть значение None
x2 — свойство, доступное только для чтения, возвращающее корень квадратного трехчлена, вычисленный по формуле:
x
2
=
−
b
+
b
2
−
4
a
c
2
a
x
2
​
 =
2a
−b+
b
2
 −4ac
​

​

Если квадратный трехчлен не имеет корней (
b
2
−
4
a
c
<
0
b
2
 −4ac<0), значением свойства должно быть значение None
view — свойство, доступное только для чтения, возвращающее строку вида:
ax^2 + bx + c
где a, b и с представляют коэффициенты квадратного трехчлена

coefficients — свойство, доступное для чтения и записи, возвращающее кортеж вида:
(a, b, c)
где a, b и с представляют коэффициенты квадратного трехчлена
Примечание 1. Если квадратный трехчлен имеет лишь один корень, значения свойств x1 и x2 должны совпадать.

Примечание 2. При изменении коэффициентов квадратного трехчлена через соответствующие атрибуты или свойство coefficients
значения свойств x1, x2, view и coefficients также должны изменяться.

Примечание 3. Если какие-либо коэффициенты квадратного трехчлена равны нулю, они по-прежнему должны присутствовать в
строке, возвращаемой свойством view, дополнительно их убирать не нужно.

Примечание 4. Дополнительная проверка данных на корректность не требуется. Гарантируется, что реализованный класс
используется только с корректными данными.

Примечание 5. Никаких ограничений касательно реализации класса QuadraticPolynomial нет, она может быть произвольной.

Примечание 6. Тестовые данные доступны по ссылкам:

Архив с тестами
GitHub
Sample Input 1:

polynom = QuadraticPolynomial(1, 2, -3)

print(polynom.a)
print(polynom.b)
print(polynom.c)
Sample Output 1:

1
2
-3
Sample Input 2:

polynom = QuadraticPolynomial(1, 2, -3)

print(polynom.x1)
print(polynom.x2)
Sample Output 2:

-3.0
1.0
Sample Input 3:

polynom = QuadraticPolynomial(1, 2, -3)

print(polynom.view)
print(polynom.coefficients)
Sample Output 3:

1x^2 + 2x - 3
(1, 2, -3)
"""


class QuadraticPolynomial:
    def __init__(self, a, b, c):
        self.a = a
        self.b = b
        self.c = c

    @property
    def x1(self):
        if (self.b ** 2 - 4 * self.a * self.c) < 0:
            return None
        return (-self.b - (self.b ** 2 - 4 * self.a * self.c)**0.5)/(2*self.a)

    @property
    def x2(self):
        if (self.b ** 2 - 4 * self.a * self.c) < 0:
            return None
        return (-self.b + (self.b ** 2 - 4 * self.a * self.c)**0.5)/(2*self.a)

    @property
    def view(self):
        def sign(num):
            if num >= 0:
                return f'+ {num}'
            return f'- {-num}'
        sign_b = sign(self.b)
        sign_c = sign(self.c)
        return f'{self.a}x^2 {sign_b}x {sign_c}'

    @property
    def coefficients(self):
        return self.a, self.b, self.c

    @coefficients.setter
    def coefficients(self, coeff):
        self.a, self.b, self.c = coeff

