# Задача о рюкзаке
# Вам доступен список items, содержащий набор предметов. Каждый предмет представлен в виде именованного кортежа и имеет
# три параметра — название, массу (в граммах) и ценность (в рублях). Также имеется рюкзак определённой грузоподъёмности.
#
# Напишите программу, которая определяет, какие предметы из представленного набора следует взять, чтобы собрать рюкзак
# с максимальной ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака.
#
# Формат входных данных
# На вход программе в первой строке подается число — грузоподъемность рюкзака (в граммах).
#
# Формат выходных данных
# Программа должна определить какие предметы из представленного набора следует взять, чтобы собрать рюкзак с
# максимальной ценностью предметов внутри, соблюдая при этом весовое ограничение рюкзака, и вывести названия полученных
# предметов в лексикографическом порядке, каждое на отдельной строке. Если рюкзак не позволяет взять ни один предмет,
# программа должна вывести текст:
#
# Рюкзак собрать не удастся
# Примечание 1. Рюкзак не обязательно должен быть наполнен полностью.
#
# Примечание 2. Подробнее с задачей о рюкзаке можно ознакомиться по ссылке.
#
# Примечание 3. Тестовые данные доступны по ссылкам:
#
# Архив с тестами
# GitHub
# Sample Input 1:
#
# 500
# Sample Output 1:
#
# Золотая монета
# Мобильный телефон
# Наушники
# Обручальное кольцо
# Ручка Паркер
# Sample Input 2:
#
# 1
# Sample Output 2:
#
# Рюкзак собрать не удастся
# Sample Input 3:
#
# 10
# Sample Output 3:
#
# Золотая монета
from collections import namedtuple
import itertools

Item = namedtuple('Item', ['name', 'mass', 'price'])

items = [Item('Обручальное кольцо', 7, 49_000),
         Item('Мобильный телефон', 200, 110_000),
         Item('Ноутбук', 2000, 150_000),
         Item('Ручка Паркер', 20, 37_000),
         Item('Статуэтка Оскар', 4000, 28_000),
         Item('Наушники', 150, 11_000),
         Item('Гитара', 1500, 32_000),
         Item('Золотая монета', 8, 140_000),
         Item('Фотоаппарат', 720, 79_000),
         Item('Лимитированные кроссовки', 300, 80_000)]

bag = int(input())
bag_collect = []
sort_items = sorted(items, key=lambda s: s[1])

for i in range(1, len(items) + 1):
    if sum(map(lambda x: x[1], sort_items[:i])) <= bag:
        for collect in itertools.combinations(sort_items, i):
            if sum(map(lambda x: x[1], collect)) <= bag:
                bag_collect.append(collect)

if bag_collect:
    [print(item[0]) for item in sorted(max(bag_collect, key=lambda c: sum(map(lambda x: x[2], c))), key=lambda it: it[0])]
else:
    print('Рюкзак собрать не удастся')

