# Функция years_days()
# Реализуйте генераторную функцию years_days(), которая принимает один аргумент:
#
# year — натуральное число
# Функция должна возвращать генератор, порождающий последовательность всех дат (тип date) в году year.
#
# Примечание 1. Возьмем в качестве примера
# 2022
# 2022 год. В январе этого года
# 31
# 31 день, в феврале —
# 28
# 28, в марте —
# 31
# 31, и так далее. Тогда генератор, полученный при вызове years_days(2022), должен порождать сначала все даты с
# 1
# 1 по
# 31
# 31 января, затем с
# 1
# 1 по
# 28
# 28 февраля, и так далее до
# 31
# 31 декабря.
#
# Примечание 2. В тестирующую систему сдайте программу, содержащую только необходимую функцию years_days(), но не код,
# вызывающий ее.
#
# Примечание 3. Тестовые данные доступны по ссылкам:
#
# Архив с тестами
# GitHub
# Sample Input:
#
# dates = years_days(2022)
#
# print(next(dates))
# print(next(dates))
# print(next(dates))
# print(next(dates))
# Sample Output:
#
# 2022-01-01
# 2022-01-02
# 2022-01-03
# 2022-01-04

from datetime import date


def years_days(year):
    start = date(year, 1, 1)
    while start.year < year + 1:
        yield start
        start = date.fromordinal(start.toordinal() + 1)


dates = years_days(2022)

for d in dates:
    if d.month == 12:
        print(d)

print(next(dates))