# Функция pairwise()
# Реализуйте генераторную функцию, которая принимает один аргумент:
#
# iterable — итерируемый объект
# Функция должна возвращать генератор, порождающий последовательность кортежей, каждый из которых содержит очередной
# элемент итерируемого объекта iterable, а также следующий за ним элемент:
#
# (<очередной элемент>, <следующий элемент>)
# Для последнего элемента следующим считается значение None.
#
# Примечание 1. Элементы итерируемого объекта в возвращаемом функцией генераторе должны располагаться в своем исходном
# порядке.
#
# Примечание 2. Гарантируется, что итерируемый объект, передаваемый в функцию, не является множеством.
#
# Примечание 3. В тестирующую систему сдайте программу, содержащую только необходимую функцию pairwise(), но не код,
# вызывающий ее.
#
# Примечание 4. Тестовые данные доступны по ссылкам:
#
# Архив с тестами
# GitHub
# Sample Input 1:
#
# numbers = [1, 2, 3, 4, 5]
#
# print(*pairwise(numbers))
# Sample Output 1:
#
# (1, 2) (2, 3) (3, 4) (4, 5) (5, None)
# Sample Input 2:
#
# iterator = iter('stepik')
#
# print(*pairwise(iterator))
# Sample Output 2:
#
# ('s', 't') ('t', 'e') ('e', 'p') ('p', 'i') ('i', 'k') ('k', None)
# Sample Input 3:
#
# print(list(pairwise([])))
# Sample Output 3:
#
# []


def my_pairwise(seq):
    if not seq:
        return seq
    it = iter(seq)
    prev = next(it, None)
    yield from ((prev, i, prev := i)[:-1] for i in it)
    yield prev, None


# ***************************************************************************************************************


def pairwise(iterable):
    it = iter(iterable)
    start = next(it, None)
    while start is not None:
        yield (start, start := next(it, None))


numbers = [1, 2, 3, 4, 5]

print(*my_pairwise(numbers))
