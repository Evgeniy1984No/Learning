# Функция parse_ranges()
# Назовем диапазоном запись двух натуральных чисел через дефис a-b, где a — левая граница диапазона, b — правая
# граница диапазона, причем a <= b. Диапазон содержит в себе все числа от a до b включительно. Например, диапазон 1-4
# содержит числа
# 1
# 1,
# 2
# 2,
# 3
# 3 и
# 4
# 4.
#
# Реализуйте генераторную функцию parse_ranges(), которая принимает один аргумент:
#
# ranges — строка, в которой через запятую указаны диапазоны чисел
# Функция должна возвращать генератор, порождающий последовательность чисел, содержащихся в диапазонах ranges.
#
# Примечание 1. В тестирующую систему сдайте программу, содержащую только необходимую функцию parse_ranges(), но не
# код, вызывающий ее.
#
# Примечание 2. Тестовые данные доступны по ссылкам:
#
# Архив с тестами
# GitHub
# Sample Input 1:
#
# print(*parse_ranges('1-2,4-4,8-10'))
# Sample Output 1:
#
# 1 2 4 8 9 10
# Sample Input 2:
#
# print(*parse_ranges('1-10,2-10'))
# Sample Output 2:
#
# 1 2 3 4 5 6 7 8 9 10 2 3 4 5 6 7 8 9 10
# Sample Input 3:
#
# print(*parse_ranges('7-32'))
# Sample Output 3:
#
# 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32


def parse_ranges(ranges: str):
    parse_split = (elem.split('-') for elem in ranges.split(','))
    res = (num for i, j in parse_split for num in range(int(i), int(j) + 1))
    yield from res


print(*parse_ranges('1-2,4-4,8-10'))